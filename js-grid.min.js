(function (a) { a.widget("jsg.event_buffer", { version: "1.0.0", options: { delay: 500 }, _create: function () { this._value = null; this._isWaiting = false; this._timer = null }, updateValue: function (b) { if (this._value != b) { this._value = b; if (!this._isWaiting) { this.startWaiting() } } }, startWaiting: function () { this._isWaiting = true; var b = this._value; var c = this; this._timer = window.setTimeout(function () { c._timer = null; if (b == c._value) { c._isWaiting = false; c._trigger("changed", null, { value: c._value }) } else { c.startWaiting() } }, this.options.delay) }, _destroy: function () { if (this._timer != null) { clearTimeout(this._timer) } } }) })(jQuery); (function (a) { a.widget("jsg.grid_body", { version: "1.0.0", options: { numberOfRowsInBody: 10, alternatingRowEnabled: false }, _create: function () { this.grid = this.options.grid; this.scrollContainer = null; this.bodyRows = []; this.buildBody() }, buildBody: function () { var i = this.widget().data("jsg-grid_header").leafColumns(); var f = this.options.numberOfRowsInBody; var g = this.widget().get(0); for (var b = 0; b < f; b++) { var e = g.insertRow(g.rows.length); for (var d = 0; d < i.length; d++) { var h = a(e.insertCell(e.cells.length)); h.addClass(d != 0 ? gridConstants.CSS_BODY_CELL : gridConstants.CSS_BODY_CELL_LEFT); h.html("&nbsp;"); this.grid._trigger(gridConstants.EVENT_BODY_CELL_CUSTOM_DRAW, null, { cell: h }) } this.bodyRows.push(a(e)) } if (f > 0) { var c = this.bodyRows[0].get(0); this.scrollContainer = a(c.insertCell(c.cells.length)); this.scrollContainer.attr("rowspan", f); this.scrollContainer.addClass(gridConstants.CSS_SCROLL_CONTAINER) } }, update: function (e) { var j = this.widget().data("jsg-grid_header").leafColumns(); for (var d = 0; d < this.bodyRows.length; d++) { var b = d + this.widget().data("jsg-table_scroll").firstElementIndex; var k = b % 2 == 1; var g = null; if (e.length >= d) { g = e[d] } var i = j.length; for (var l = 0; l < i; l++) { var f = a(this.bodyRows[d].get(0).cells[l]); var h = !k && this.options.alternatingRowEnabled ? l == 0 ? gridConstants.CSS_BODY_CELL_ALT_LEFT : gridConstants.CSS_BODY_CELL_ALT : l == 0 ? gridConstants.CSS_BODY_CELL_LEFT : gridConstants.CSS_BODY_CELL; f.removeClass(gridConstants.CSS_BODY_CELL); f.removeClass(gridConstants.CSS_BODY_CELL_ALT); f.removeClass(gridConstants.CSS_BODY_CELL_LEFT); f.removeClass(gridConstants.CSS_BODY_CELL_ALT_LEFT); f.addClass(h); var c = j[l]; if (g != null) { f.html(g[c.field]) } else { f.empty() } this.grid._trigger(gridConstants.EVENT_BODY_CELL_CUSTOM_DRAW, null, { cell: f, field: c.field, value: g == null ? null : g[c.field], dataRow: g, dataSourceIndex: b, isEmpty: g == null }) } } }, getScrollContainer: function () { return this.scrollContainer } }) })(jQuery); var grid_column = function (b, c) { $.extend(this.defaultMeta, c); this.headerCell = null; this.caption = c.caption; this.name = c.name; this.grid = b; this.field = c.field; this.width = c.width; this.sortDirection = null; this.subColumns = []; if (c.subColumns != null) { for (var a = 0; a < c.subColumns.length; a++) { this.subColumns.push(new grid_column(this.grid, c.subColumns[a], b)) } } }; grid_column.prototype = { defaultMeta: { width: "100px", subColumns: [] }, leafColumnCount: function () { var b = 0; for (var a = 0; a < this.subColumns.length; a++) { b += this.subColumns[a].leafColumnCount() } if (b == 0) { return 1 } return b }, leafColumns: function () { var a = []; this.leafColumnsHelper(a); return a }, leafColumnsHelper: function (b) { for (var a = 0; a < this.subColumns.length; a++) { this.subColumns[a].leafColumnsHelper(b) } if (this.subColumns.length == 0) { b.push(this) } }, depth: function () { if (this.subColumns.length == 0) { return 1 } var b = 0; for (var a = 0; a < this.subColumns.length; a++) { if (b < this.subColumns[a].depth()) { b = this.subColumns[a].depth() } } return b + 1 }, getColumnsForLevel: function (b) { var a = []; a = this.getColumnsForLevelHelper(0, b, a); return a }, getColumnsForLevelHelper: function (d, c, b) { if (d == c) { b.push(this) } else { for (var a = 0; a < this.subColumns.length; a++) { b = this.subColumns[a].getColumnsForLevelHelper(d + 1, c, b) } } return b }, processHeaderCel: function (c) { this.headerCell = c; c.empty(); c.unbind(); var e = $('<table width="100%" style="border-collapse:collapse" cellpadding="0" cellspacing="0"><tr><td style="width:100%;padding-left:5px"><span class="' + gridConstants.CSS_HEADER_CELL_CAPTION + '">' + this.caption + "</span></td></tr></table>"); e.appendTo(c); if (this.grid.orderByColumn == this) { var b = $("tr", e); var a = $(b.get(0).insertCell(1)); var f = $("<div/>"); f.removeClass(); if (this.sortDirection == gridConstants.SORT_ORDER_ASCENDING) { f.addClass(gridConstants.CSS_SORT_DIRECTION_IMG_ASC) } if (this.sortDirection == gridConstants.SORT_ORDER_DESCENDING) { f.addClass(gridConstants.CSS_SORT_DIRECTION_IMG_DESC) } f.appendTo(a) } if (!isNaN(parseInt(this.width))) { c.css("width", this.width); c.attr("width", this.width) } this.grid._trigger(gridConstants.EVENT_HEADER_CELL_CUSTOM_DRAW, null, { cell: c, columnName: this.name, caption: this.caption, columnObj: this }); var d = this; c.bind("click", null, function (g) { d.orderByMe() }) }, orderByMe: function () { if (this.grid.orderByColumn == this) { if (this.sortDirection == null || this.sortDirection == gridConstants.SORT_ORDER_DESCENDING) { this.sortDirection = gridConstants.SORT_ORDER_ASCENDING } else { this.sortDirection = gridConstants.SORT_ORDER_DESCENDING } } else { var a = null; if (this.grid.orderByColumn != null) { a = this.grid.orderByColumn } this.grid.orderByColumn = this; this.sortDirection = gridConstants.SORT_ORDER_ASCENDING; if (a != null) { a.processHeaderCel(a.headerCell) } } this.grid._raiseGetDataFrame(); this.processHeaderCel(this.headerCell) }, orderColumnsNames: function () { var c = []; var b = this.getColumnsForLevel(this.depth() - 1); for (var a = 0; a < b.length; a++) { c.push(b[a].field) } return c } }; var gridConstants = { SORT_ORDER_ASCENDING: "ASC", SORT_ORDER_DESCENDING: "DESC", PAGER_POSITION_TOP: "PAGER_POSITION_TOP", PAGER_POSITION_BOTTOM: "PAGER_POSITION_BOTTOM", PAGER_POSITION_TOP_AND_BOTTOM: "PAGER_POSITION_TOP_AND_BOTTOM", EVENT_BODY_CELL_CUSTOM_DRAW: "bodyCellCustomDraw", EVENT_HEADER_CELL_CUSTOM_DRAW: "columnHeaderCustomDraw", EVENT_GET_DATA_FRAME: "getDataFrame", CSS_MAIN_TABLE_STYLE: "grid-main-table", CSS_HEADER_CELL: "grid-header-cell", CSS_HEADER_CELL_CAPTION: "grid-header-caption", CSS_SCROLL_CONTAINER: "grid-scroll-container", CSS_BODY_CELL: "grid-body-cell", CSS_BODY_CELL_LEFT: "grid-body-cell-left", CSS_BODY_CELL_ALT: "grid-body-cell-alt", CSS_BODY_CELL_ALT_LEFT: "grid-body-cell-alt-left", CSS_SORT_DIRECTION_IMG_DESC: "grid-icon-triangle-desc", CSS_SORT_DIRECTION_IMG_ASC: "grid-icon-triangle-asc", CSS_PAGER_CONTAINER: "grid-pager-container", CSS_PAGE_INDEX: "grid-page-index", CSS_PAGE_INDEX_CURRENT: "grid-page-index-current", CSS_PAGE_INDEXES_DELIMETER: "grid-page-indexes-delimeter", CSS_NEXT_PAGE_BUTTON: "grid-button-next-page", CSS_NEXT_PAGE_BUTTON_DISABLED: "grid-button-next-page-disabled", CSS_PREV_PAGE_BUTTON: "grid-button-prev-page", CSS_PREV_PAGE_BUTTON_DISABLED: "grid-button-prev-page-disabled" }; (function (a) { a.widget("jsg.grid_header", { version: "1.0.0", options: { isVisible: true }, _create: function () { this.grid = this.options.grid; this.headerRows = []; this.update() }, clear: function () { a(this.headerRows).each(function (b, c) { c.remove() }); this.headerRows = [] }, update: function () { this.clear(); var h = this.depth(); var d = this.widget().get(0); for (var i = 0; i < h; i++) { var c = a(d.insertRow(i)); this.headerRows.push(c); var f = this.getColumnsForLevel(i); for (var b = 0; b < f.length; b++) { var e = a(c.get(0).insertCell(c.get(0).cells.length)); e.addClass(gridConstants.CSS_HEADER_CELL); e.attr({ colSpan: f[b].leafColumnCount(), rowSpan: h - f[b].depth() + 1 - i }); f[b].processHeaderCel(e) } c.css("display", this.options.isVisible ? "" : "none") } var g = a(d.rows[0].insertCell(d.rows[0].cells.length)); g.attr("rowSpan", h); g.html("&nbsp;"); g.addClass(gridConstants.CSS_HEADER_CELL) }, depth: function () { var c = 0; for (var b = 0; b < this.grid.columns.length; b++) { if (c < this.grid.columns[b].depth()) { c = this.grid.columns[b].depth() } } return c }, leafColumnsCount: function () { var c = 0; for (var b = 0; b < this.grid.columns.length; b++) { c += this.grid.columns[b].leafColumnCount() } return c }, getColumnsForLevel: function (d) { var c = []; for (var b = 0; b < this.grid.columns.length; b++) { c = c.concat(this.grid.columns[b].getColumnsForLevel(d)) } return c }, leafColumns: function () { var c = []; for (var b = 0; b < this.grid.columns.length; b++) { c = c.concat(this.grid.columns[b].leafColumns()) } return c } }) })(jQuery); (function (a) { a.widget("jsg.grid_pager", { version: "1.0.0", options: { showPager: true, pageSize: 15, currentPageIndex: 0, position: gridConstants.PAGER_POSITION_BOTTOM }, _create: function () { this.grid = this.options.grid }, renderTopPager: function () { if (this.options.showPager && this.isTopPagerVisible()) { this.topPagerContainer = this.appendPagerToTable() } }, renderBottomPager: function () { if (this.options.showPager && this.isBottomPagerVisible()) { this.bottomPagerContainer = this.appendPagerToTable() } }, appendPagerToTable: function () { var c = this.widget().get(0); var e = this.widget().data("jsg-grid_header"); var b = a(c.insertRow(c.rows.length)); var d = a(b.get(0).insertCell(0)); d.attr("colspan", e.leafColumnsCount() + 1); d.addClass(gridConstants.CSS_PAGER_CONTAINER); this._updatePagerContainer(d); return d }, getPageShortcuts: function () { var c = [0, 1]; if (this.getCurrentPageIndex() <= 4) { c = c.concat([2, 3, 4, 5, 6]) } else { if (this.getCurrentPageIndex() < this.getPagesCount() - 4) { c = c.concat([this.getCurrentPageIndex() - 2, this.getCurrentPageIndex() - 1, this.getCurrentPageIndex(), this.getCurrentPageIndex() + 1, this.getCurrentPageIndex() + 2]) } else { for (var d = 7; d >= 0; d--) { c.push(this.getPagesCount() - d) } } } c.push(this.getPagesCount() - 1, this.getPagesCount() - 2); c = a.grep(c, a.proxy(function (g, f) { return f == a.inArray(g, c) && g >= 0 && g < this.getPagesCount() }, this)); c.sort(function (g, f) { return g - f }); var b = []; for (var e = 0; e < c.length; e++) { b.push(c[e]); if (e != c.length - 1 && c[e] + 1 != c[e + 1]) { b.push(null) } } return b }, getCurrentPageIndex: function () { return this.options.currentPageIndex }, getPagesCount: function () { return Math.max(1, Math.ceil(this.options.numberOfElementsInDataSource / this.options.pageSize)) }, getNumberOfElementsToScroll: function () { if (this.options.showPager == true) { if (this.options.currentPageIndex == this.getPagesCount() - 1) { return this.options.numberOfElementsInDataSource % this.options.pageSize } else { return this.options.pageSize } } else { return this.options.numberOfElementsInDataSource } }, getFirstElementIndex: function () { return this.options.currentPageIndex * this.options.pageSize }, isTopPagerVisible: function () { return this.options.position == gridConstants.PAGER_POSITION_TOP_AND_BOTTOM || this.options.position == gridConstants.PAGER_POSITION_TOP }, isBottomPagerVisible: function () { return this.options.position == gridConstants.PAGER_POSITION_TOP_AND_BOTTOM || this.options.position == gridConstants.PAGER_POSITION_BOTTOM }, isPagerVisible: function () { return this.isTopPagerVisible() || this.isBottomPagerVisible() }, goToPge: function (b) { this.options.currentPageIndex = b; if (this.topPagerContainer) { this._updatePagerContainer(this.topPagerContainer) } if (this.bottomPagerContainer) { this._updatePagerContainer(this.bottomPagerContainer) } this._trigger("pageChanged", null, { firstElementIndex: this.getFirstElementIndex(), pageSize: this.options.pageSize }) }, nextPage: function () { this.goToPge(this.getCurrentPageIndex() + 1) }, prevPage: function () { this.goToPge(this.getCurrentPageIndex() - 1) }, _setOption: function (b, c) { a.Widget.prototype._setOption.apply(this, arguments); if (b === "numberOfElementsInDataSource") { this.goToPge(0) } if (b === "currentPageIndex") { this.goToPge(this.options.currentPageIndex) } }, _updatePagerContainer: function (c) { c.empty(); var m = a("<table></table>"); m.appendTo(c); var o = m.get(0).insertRow(0); var l = a(o.insertCell(o.cells.length)); var e = a("<div></div>"); e.appendTo(l); var d = this.getCurrentPageIndex() > 0; e.addClass(d ? gridConstants.CSS_PREV_PAGE_BUTTON : gridConstants.CSS_PREV_PAGE_BUTTON_DISABLED); if (d) { e.click(a.proxy(this.prevPage, this)) } var h = this.getPageShortcuts(); for (var f = 0; f < h.length; f++) { var n = a(o.insertCell(o.cells.length)); if (h[f] != null) { var b = h[f] == this.getCurrentPageIndex(); n.addClass(b ? gridConstants.CSS_PAGE_INDEX_CURRENT : gridConstants.CSS_PAGE_INDEX); n.text(h[f] + 1); n.data("page", h[f]); if (!b) { n.click(a.proxy(this.goToPge, this, h[f])) } } else { n.addClass(gridConstants.CSS_PAGE_INDEXES_DELIMETER); n.html("&hellip;") } } var g = a(o.insertCell(o.cells.length)); var j = a("<div></div>"); j.appendTo(g); var k = this.getCurrentPageIndex() < this.getPagesCount() - 1; j.addClass(k ? gridConstants.CSS_NEXT_PAGE_BUTTON : gridConstants.CSS_NEXT_PAGE_BUTTON_DISABLED); if (k) { j.click(a.proxy(this.nextPage, this)) } } }) })(jQuery); (function (a) { a.widget("jsg.grid", { version: "1.0.0", options: { columns: [], numberOfRowsInScrollableArea: 10, headerVisible: true, alternatingRowEnabled: false, pagerSettings: {} }, _create: function () { this.columns = []; this.orderByColumn = null; this.table = a("<table></table>"); this.table.addClass(gridConstants.CSS_MAIN_TABLE_STYLE); this.table.appendTo(this.widget()); for (var b = 0; b < this.options.columns.length; b++) { this.columns.push(new grid_column(this, this.options.columns[b])) } this.table.grid_header({ grid: this }); this.table.grid_pager(a.extend({ grid: this, numberOfElementsInDataSource: this.options.numberOfElementsInDataSource, pageChanged: a.proxy(function (c, d) { this.table.table_scroll({ numberOfElementsInDataSource: this.table.data("jsg-grid_pager").getNumberOfElementsToScroll() }); this._raiseGetDataFrame(); this.table.data("jsg-table_scroll").scrollTo(0, false) }, this) }, this.options.pagerSettings)); this.table.data("jsg-grid_pager").renderTopPager(); this.table.grid_body({ grid: this, numberOfRowsInBody: this.options.numberOfRowsInScrollableArea, alternatingRowEnabled: this.options.alternatingRowEnabled }); this.table.data("jsg-grid_pager").renderBottomPager(); this.table.table_scroll({ bufferEvents: !this.table.data("jsg-grid_pager").isPagerVisible(), scrollContainer: this.table.data("jsg-grid_body").getScrollContainer(), numberOfRowsInScrollableArea: this.options.numberOfRowsInScrollableArea, numberOfElementsInDataSource: this.table.data("jsg-grid_pager").getNumberOfElementsToScroll(), rowScrollableAreaStartsFrom: this.table.data("jsg-grid_header").depth(), scroll: a.proxy(this._raiseGetDataFrame, this) }); this._raiseGetDataFrame() }, setDataFrame: function (b) { this.table.data("jsg-grid_body").update(b); this.table.data("jsg-table_scroll").update() }, refreshData: function () { this._raiseGetDataFrame() }, _setOption: function (b, c) { a.Widget.prototype._setOption.apply(this, arguments); if (b === "numberOfElementsInDataSource") { this.table.grid_pager({ numberOfElementsInDataSource: this.options.numberOfElementsInDataSource }); this.table.table_scroll({ numberOfElementsInDataSource: this.table.data("jsg-grid_pager").getNumberOfElementsToScroll() }) } }, _raiseGetDataFrame: function () { var b = this.table.data("jsg-table_scroll"); var c = this.table.data("jsg-grid_pager"); this._trigger(gridConstants.EVENT_GET_DATA_FRAME, null, { orderByFields: this.orderByColumn == null ? [] : this.orderByColumn.orderColumnsNames(), direction: this.orderByColumn == null ? null : this.orderByColumn.sortDirection, startFromRecord: b.getFirstElementIndex() + c.getFirstElementIndex(), numberOfRecordsToShow: this.options.numberOfRowsInScrollableArea }) }, _destroy: function () { this.table.remove() } }) })(jQuery); (function (i) { var C = "scrollUpImg"; var p = "scrollUpImgPressed"; var g = "scrollUpImgDis"; var a = "scrollDownImg"; var v = "scrollDownImgPressed"; var B = "scrollDownImgDis"; var u = "scrollBgElement"; var w = "movableTop"; var b = "movableTopHover"; var l = "movableTopPressed"; var k = "movableBottom"; var e = "movableBottomHover"; var A = "movableBottomPressed"; var r = "movableGrip"; var z = "movableGripHover"; var d = "movableGripPressed"; var y = "movable"; var x = "movableHover"; var j = "movablePressed"; var t = 600; var c = 300; var m = 100; var h = "UP"; var f = "DOWN"; var q = "MOVABLE"; var s = "NORMAL"; var n = "PRESSED"; var o = "HOVER"; i.widget("jsg.table_scroll", { version: "1.0.0", options: { rowScrollableAreaStartsFrom: 1, bufferEvents: false, bufferEventsDelay: 200 }, _create: function () { this.firstElementIndex = 0; this.populatedFirstElementIndex = null; this.parentControl = this.options.scrollContainer; this.tableElement = this.widget().get(0); this.mainDiv = null; this.movableDiv = null; this.upImage = null; this.downImage = null; this.movableDivTopImg = null; this.movableDivCenterImg = null; this.movableDivBottomImg = null; this.isDownButtonPress = false; this.isUpButtonPress = false; this.currentTimerId = null; this.mouseStartYPosition = -1; this.isInMotion = false; this.comulativeScrollShift = 0; this.currentScrolableTimeInterval = t; this.widget().on("mousewheel", i.proxy(this._tableMouseWheel, this)); this.widget().on("DOMMouseScroll", i.proxy(this._tableMouseWheel, this)); this.widget().event_buffer({ delay: this.options.bufferEventsDelay, changed: i.proxy(this._triggerScrollEvent, this) }); this._buildScrollElements(); this._addTouchSupport(); this._onTableScroll() }, getFirstElementIndex: function () { return this.firstElementIndex }, _setOption: function (D, E) { i.Widget.prototype._setOption.apply(this, arguments); if (D === "numberOfElementsInDataSource") { this._ensureFirstElementIndex(); this.update() } }, _onTableScroll: function () { if (this.populatedFirstElementIndex != this.firstElementIndex) { if (this.options.bufferEvents) { this.widget().data("jsg-event_buffer").updateValue(this.firstElementIndex) } else { this._triggerScrollEvent() } this.populatedFirstElementIndex = this.firstElementIndex } }, _triggerScrollEvent: function () { this._trigger("scroll", null, { firstElementIndex: this.firstElementIndex, numberOfRowsInScrollableArea: this.options.numberOfRowsInScrollableArea, rowScrollableAreaStartsFrom: this.options.rowScrollableAreaStartsFrom }) }, _buildScrollElements: function () { this.mainDiv = i('<div class="' + u + '" style="height: ' + this.parentControl.height() + 'px;"><div style="top: 0px; position: relative"></div><div style="position: relative; bottom: 0px"></div><div style="position: relative;"><div style="position: relative; top: 0;"></div><div style="position: relative;"></div><div style="position: relative;"></div></div></div>'); this.upImage = i(this.mainDiv.children()[0]); this.downImage = i(this.mainDiv.children()[1]); this.movableDiv = i(this.mainDiv.children()[2]); this.movableDivTopImg = i(this.movableDiv.children()[0]); this.movableDivCenterImg = i(this.movableDiv.children()[1]); this.movableDivBottomImg = i(this.movableDiv.children()[2]); var O = i.proxy(this._scrollMouseDown, this); var K = i.proxy(this._scrollMouseUp, this); var D = i.proxy(this._scrollMouseOut, this); var M = i.proxy(this._mainDivMouseMove, this); var I = i.proxy(this._selectstart, this); var J = i.proxy(this._imageMousOut, this); var E = i.proxy(this._imageMousDown, this); var H = i.proxy(this._imageMousUp, this); var F = i.proxy(this._movableDivMouseOut, this); var G = i.proxy(this._movableDivMouseDown, this); var L = i.proxy(this._movableDivMouseUp, this); var N = i.proxy(this._movableDivMouseMove, this); this.mainDiv.on("mousedown", O); this.mainDiv.on("mouseup", K); this.mainDiv.on("mouseout", D); this.mainDiv.on("mousemove", M); this.mainDiv.on("selectstart", I); this.upImage.on("mouseout", J); this.upImage.on("mousedown", E); this.upImage.on("mouseup", H); this.upImage.on("selectstart", I); this.downImage.on("mouseout", J); this.downImage.on("mousedown", E); this.downImage.on("mouseup", H); this.downImage.on("selectstart", I); this.movableDiv.on("mouseout", F); this.movableDiv.on("mousedown", G); this.movableDiv.on("mouseup", L); this.movableDiv.on("mousemove", N); this.movableDiv.on("selectstart", I); this._setButtonState(h, s); this._setButtonState(f, s); this._setButtonState(q, s); if (this.parentControl != null) { this.mainDiv.appendTo(this.parentControl) } this.update() }, update: function () { this.mainDiv.hide(); this.mainDiv.height(this.parentControl.height()); this.mainDiv.show(); if (this.parentControl.height() < (this.upImage.height() + this.downImage.height())) { this.downImage.hide(); this.upImage.hide(); this.movableDiv.hide(); return } else { this.downImage.show(); this.upImage.show(); this.movableDiv.show() } if (this._max() == 0) { this.movableDiv.hide() } else { this.movableDiv.show(); var F = this.upImage.height() + this.downImage.height(); var D = this.options.numberOfElementsInDataSource - this.options.numberOfRowsInScrollableArea; var H = (this.options.numberOfRowsInScrollableArea / this.options.numberOfElementsInDataSource) * (this.mainDiv.height() - F); var I = this.movableDivTopImg.height() + this.movableDivCenterImg.height() + this.movableDivBottomImg.height(); var L = I; var J = L > H ? L : H; var G = this.mainDiv.height() - F - J; var K = G / D; var E = this.firstElementIndex * K; this.movableDiv.css({ top: (E - this.upImage.height()) + "px", height: J + "px" }); this.movableDivBottomImg.css({ top: ((J - I)) + "px" }); this.movableDivCenterImg.css({ top: (J / 2 - this.movableDivTopImg.height() - this.movableDivCenterImg.height() / 2) + "px" }) } this.downImage.css({ top: this.mainDiv.height() - 2 * this.downImage.height() }) }, scrollTo: function (F, E) { this.firstElementIndex = F; var D = this._ensureFirstElementIndex(); this.update(); if (E) { this._onTableScroll() } return D }, _max: function () { return this.options.numberOfElementsInDataSource > this.options.numberOfRowsInScrollableArea ? this.options.numberOfElementsInDataSource - this.options.numberOfRowsInScrollableArea : 0 }, _ensureFirstElementIndex: function () { if (this.firstElementIndex < 0) { this.firstElementIndex = 0; return false } if (this.firstElementIndex > this._max()) { this.firstElementIndex = this._max(); return false } return true }, _tableMouseWheel: function (G) { if (this._max() == 0) { return } var D = false; var H = false; var F = G.originalEvent; if (F.wheelDelta) { if (F.wheelDelta >= 120) { D = true } else { if (F.wheelDelta <= -120) { H = true } } } if (F.detail) { if (F.detail == -3) { D = true } else { if (F.detail == 3) { H = true } } } var E = true; if (D) { E = this.scrollTo(this.firstElementIndex - 1, true) } if (H) { E = this.scrollTo(this.firstElementIndex + 1, true) } if (E) { G.preventDefault() } }, _movableDivMouseOut: function (E) { if (this._max() == 0) { return } this._setButtonState(q, s); var D = E.toElement || E.currentTarget; if (D == this.mainDiv.get(0) && this.isInMotion == 1) { return } if (D == this.movableDiv.get(0) || D == this.movableDivTopImg.get(0) || D == this.movableDivCenterImg.get(0) || D == this.movableDivBottomImg.get(0)) { return } if (this.isInMotion) { this._onTableScroll(); this.isInMotion = false } }, _movableDivMouseDown: function (D) { if (this._max() == 0) { return } this.isInMotion = true; this.mouseStartYPosition = D.clientY; D.stopImmediatePropagation(); this._setButtonState(q, n) }, _movableDivMouseUp: function (D) { if (this._max() == 0) { return } this.isInMotion = false; this._onTableScroll(true); D.stopImmediatePropagation(); this._setButtonState(q, o) }, _movableDivMouseMove: function (F) { if (this._max() == 0) { return } if (this.isInMotion) { var E = F.clientY - this.mouseStartYPosition; var G = (E * this.options.numberOfElementsInDataSource / (this.mainDiv.height() - (this.upImage.height() + this.downImage.height()))); var D = parseInt(G); this.comulativeScrollShift += G - D; if (this.comulativeScrollShift > 1) { this.comulativeScrollShift -= 1; D += 1 } if (this.comulativeScrollShift < -1) { this.comulativeScrollShift += 1; D -= 1 } this.scrollTo(this.firstElementIndex + D, false); this.mouseStartYPosition = F.clientY; this._setButtonState(q, n) } else { this._setButtonState(q, o) } F.stopImmediatePropagation() }, _mainDivMouseMove: function (D) { if (this._max() == 0) { return } if (this.isInMotion) { this._movableDivMouseMove(D) } }, _scrollMouseDown: function (E) { if (E.currentTarget != this.mainDiv.get(0)) { return } var G = E.clientY + i(window).scrollTop() - this.mainDiv.offset().top; var F = this.upImage.height() + this.downImage.height(); var D = (G - this.upImage.height()) * this.options.numberOfElementsInDataSource / (this.mainDiv.height() - F); D = parseInt(D); this.scrollTo(D, false) }, _scrollMouseUp: function () { this.isInMotion = false; this._onTableScroll() }, _scrollMouseOut: function (D) { var F = D.toElement || D.currentTarget; var E = D.fromElement || D.relatedTarget; if (F != this.mainDiv.get(0) && F != this.movableDiv.get(0) && F != this.movableDivTopImg.get(0) && F != this.movableDivCenterImg.get(0) && F != this.movableDivBottomImg.get(0) && E != this.movableDiv.get(0) && E != this.movableDivTopImg.get(0) && E != this.movableDivCenterImg.get(0) && E != this.movableDivBottomImg.get(0)) { this.isInMotion = false; this._onTableScroll() } }, _imageMousOut: function (D) { if (this._max() == 0) { return } this._stopTimer(); D.stopImmediatePropagation() }, _imageMousDown: function (E) { if (this._max() == 0) { return } var D = E.target; if (D == this.upImage.get(0)) { if (!this.scrollTo(this.firstElementIndex - 1, false)) { this._stopTimer() } this.isUpButtonPress = true; if (this.currentTimerId) { clearTimeout(this.currentTimerId) } this.currentTimerId = setTimeout(i.proxy(this._scrolTimer, this, true), this.currentScrolableTimeInterval); this._setButtonState(h, n) } if (D == this.downImage.get(0)) { if (!this.scrollTo(this.firstElementIndex + 1, false)) { this._stopTimer() } this.isDownButtonPress = true; if (this.currentTimerId) { clearTimeout(this.currentTimerId) } this.currentTimerId = setTimeout(i.proxy(this._scrolTimer, this, false), this.currentScrolableTimeInterval); this._setButtonState(f, n) } E.stopImmediatePropagation() }, _imageMousUp: function (D) { if (this._max() == 0) { return } this._stopTimer(); D.stopImmediatePropagation() }, _scrolTimer: function (D) { if ((this.isUpButtonPress && D) || (this.isDownButtonPress && !D)) { var E; if (D) { E = this.scrollTo(this.firstElementIndex - 1, false) } else { E = this.scrollTo(this.firstElementIndex + 1, false) } if (!E) { this._stopTimer() } this.currentScrolableTimeInterval -= c; if (this.currentScrolableTimeInterval < m) { this.currentScrolableTimeInterval = m } if (this.currentTimerId) { clearTimeout(this.currentTimerId) } this.currentTimerId = setTimeout(i.proxy(this._scrolTimer, this, D), this.currentScrolableTimeInterval) } }, _stopTimer: function () { this._onTableScroll(); this.isUpButtonPress = false; this.isDownButtonPress = false; this._setButtonState(h, s); this._setButtonState(f, s); if (this.currentTimerId) { clearTimeout(this.currentTimerId) } this.currentScrolableTimeInterval = t }, _selectstart: function (D) { D.preventDefault(); return false }, _setButtonState: function (D, E) { if (D == h) { this.upImage.removeClass(C); this.upImage.removeClass(g); this.upImage.removeClass(p); if (E == s) { this.upImage.addClass(this._max() == 0 ? g : C) } if (E == n) { this.upImage.addClass(this._max() == 0 ? g : p) } } if (D == f) { this.downImage.removeClass(a); this.downImage.removeClass(B); this.downImage.removeClass(v); if (E == s) { this.downImage.addClass(this._max() == 0 ? B : a) } if (E == n) { this.downImage.addClass(this._max() == 0 ? B : v) } } if (D == q) { if (this.movableDiv.data("styleState") == E) { return } this.movableDiv.data("styleState", E); this.movableDivTopImg.removeClass(w); this.movableDivCenterImg.removeClass(r); this.movableDivBottomImg.removeClass(k); this.movableDivTopImg.removeClass(b); this.movableDivCenterImg.removeClass(z); this.movableDivBottomImg.removeClass(e); this.movableDivTopImg.removeClass(l); this.movableDivCenterImg.removeClass(d); this.movableDivBottomImg.removeClass(A); this.movableDiv.removeClass(y); this.movableDiv.removeClass(x); this.movableDiv.removeClass(j); if (E == s) { this.movableDivTopImg.addClass(w); this.movableDivCenterImg.addClass(r); this.movableDivBottomImg.addClass(k); this.movableDiv.addClass(y) } if (E == o) { this.movableDivTopImg.addClass(b); this.movableDivCenterImg.addClass(z); this.movableDivBottomImg.addClass(e); this.movableDiv.addClass(x) } if (E == n) { this.movableDivTopImg.addClass(l); this.movableDivCenterImg.addClass(d); this.movableDivBottomImg.addClass(A); this.movableDiv.addClass(j) } } }, _addTouchSupport: function () { this.movableDiv.on("touchstart", i.proxy(this._touchStartScroll, this)); this.movableDiv.on("touchmove", i.proxy(this._touchMoveScroll, this)); this.movableDiv.on("touchend", i.proxy(this._touchEndScroll, this)); this.upImage.on("touchstart", i.proxy(this._touchStartUpDown, this)); this.upImage.on("touchend", i.proxy(this._touchEndUpDown, this)); this.downImage.on("touchstart", i.proxy(this._touchStartUpDown, this)); this.downImage.on("touchend", i.proxy(this._touchEndUpDown, this)); this.widget().on("touchstart", i.proxy(this._touchStartTable, this)); this.widget().on("touchmove", i.proxy(this._touchMoveTable, this)); this.widget().on("touchend", i.proxy(this._touchEndTable, this)) }, _touchStartUpDown: function (D) { var E = D.originalEvent.touches[0] || D.originalEvent.changedTouches[0]; D.clientY = E.pageY; this._imageMousDown(D); D.preventDefault(); D.stopPropagation() }, _touchEndUpDown: function (D) { this._imageMousUp(D); D.preventDefault(); D.stopPropagation() }, _touchStartScroll: function (D) { var E = D.originalEvent.touches[0] || D.originalEvent.changedTouches[0]; D.clientY = E.pageY; this._movableDivMouseDown(D); D.preventDefault(); D.stopPropagation() }, _touchMoveScroll: function (D) { var E = D.originalEvent.touches[0] || D.originalEvent.changedTouches[0]; D.clientY = E.pageY; this._movableDivMouseMove(D); D.preventDefault(); D.stopPropagation() }, _touchEndScroll: function (D) { this._movableDivMouseUp(D); D.preventDefault(); D.stopPropagation() }, _touchStartTable: function (D) { var E = D.originalEvent.touches[0] || D.originalEvent.changedTouches[0]; this._oldY = E.pageY }, _touchMoveTable: function (D) { D.preventDefault(); var F = D.originalEvent.touches[0] || D.originalEvent.changedTouches[0]; var E = (F.pageY - this._oldY) / 30; if (E < 0) { E = Math.floor(E) + 1 } else { E = Math.floor(E) } if (E != 0 && !isNaN(E) && E != null) { if (E > 0) { this.scrollTo(this.firstElementIndex - 1, true) } else { if (E < 0) { this.scrollTo(this.firstElementIndex + 1, true) } } this._oldY = F.pageY } }, _touchEndTable: function () { this._oldY = null }, _destroy: function () { this.widget().event_buffer("destroy"); this.widget().off("mousewheel", this._tableMouseWheel); this.widget().off("DOMMouseScroll", this._tableMouseWheel); this.widget().off("touchstart", this._touchStartTable); this.widget().off("touchend", this._touchEndTable); this.widget().off("touchmove", this._touchMoveTable); this.mainDiv.remove() } }) })(jQuery);